---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Creates a stack for collection SES Notifications via a Lambda function and putting into DDB

Parameters:
  CreateDeploymentBucket:
    Type: String
    Default: 'false'
    Description: Whether or not to create an S3 for deploying code
    AllowedValues: ['true', 'false']

  TableReadCapacity:
    Type: Number
    Description: Read capacity for the DynamoDB table.
    Default: '1'
    MinValue: 1
  TableWriteCapacity:
    Type: Number
    Description: Write capacity for the DynamoDB table.
    Default: '1'
    MinValue: 1

  AllowedCorsOrigin:
    Type: String
    Description: The CORS origin allowed to access the API
    Default: ''

Conditions:
  DoCreateDeploymentBucket:
    !Equals [ !Ref CreateDeploymentBucket, 'true' ]

Outputs:
  SesEventTableName:
    Value: !Ref SesEventTable

  ApiUrl:
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'

Resources:
  SesEventTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        # - AttributeName: Timestamp
        #   AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        # - AttributeName: Timestamp
        #   KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref TableReadCapacity
        WriteCapacityUnits: !Ref TableWriteCapacity

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {Service: lambda.amazonaws.com}
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: DynamoDb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:BatchGet*
                  - dynamodb:Get*
                  - dynamodb:PutItem
                  - dynamodb:Update*
                Resource: !GetAtt SesEventTable.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CollectorLambdaFunction}'
      RetentionInDays: 14

  LambdaRoleLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaLoggingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt LambdaLogGroup.Arn
      Roles:
        - !Ref LambdaRole
        

  SesEventTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Ref AWS::StackName
      Subscription: 
        - Endpoint: !GetAtt CollectorLambdaFunction.Arn
          Protocol: lambda

  SesEventTopicPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CollectorLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SesEventTopic

  SesEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument: 
        Id: SesEventTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: SqsPublishFromSes
            Action:
              - sns:Publish
            Effect: Allow
            Principal: {Service: ses.amazonaws.com}
            Resource: !Ref SesEventTopic
      Topics: 
        - !Ref SesEventTopic

  CollectorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: SES Event Collector
      Environment:
        Variables:
          SesEventTableName: !Ref SesEventTable
      Handler: 'SesCollector.Collector::SesCollector.Collector.Function::FunctionHandler'
      Runtime: dotnetcore3.1
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      Code:
        S3Bucket: sescollector-dev-deploymentbucketstack-hq5-bucket-11xpzx2fu8skr
        S3Key: SesCollector-Collector-2020-05-09-08-15.zip

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: !Sub "'${AllowedCorsOrigin}'"

  GetEventsApi:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'SesCollector.Api::SesCollector.Api.Functions::GetSesEventsAsync'
      Runtime: dotnetcore3.1
      CodeUri: 's3://sescollector-dev-deploymentbucketstack-hq5-bucket-11xpzx2fu8skr/SesCollector-Api-2020-05-14-00-31.zip'
      Description: Function to get a list of events
      MemorySize: 256
      Timeout: 30
      Role: null
      Policies:
        - AWSLambdaFullAccess
      Environment:
        Variables:
          SesEventTableName: !Ref SesEventTable
          AllowedCorsOrigin: !Ref AllowedCorsOrigin
      Events:
        GetList:
          Type: Api
          Properties:
            Path: /events
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi  

  DeploymentBucketStack:
    Type: AWS::CloudFormation::Stack
    Condition: DoCreateDeploymentBucket
    Properties:
      Parameters:
        AllowPublicRead: true
        CorsDomains: ''
      TemplateURL: https://s3.amazonaws.com/digops-stacks/version/19.9.0/s3-bucket.template