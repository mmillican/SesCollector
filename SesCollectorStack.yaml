---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Creates a stack for collection SES Notifications via a Lambda function and putting into DDB

Parameters:
  # CreateDeploymentBucket:
  #   Type: String
  #   Default: 'false'
  #   Description: Whether or not to create an S3 for deploying code
  #   AllowedValues: ['true', 'false']

  CodeBucketName:
    Type: String
    Description: The name of the bucket where the code artifacts are stored

  CollectorArtifactKey:
    Type: String
    Description: The key/path for the collector artifact
    
  ApiArtifactKey:
    Type: String
    Description: The key/path for the API artifact

# Conditions:
#   DoCreateDeploymentBucket:
#     !Equals [ !Ref CreateDeploymentBucket, 'true' ]

Outputs:
  SesEventTableName:
    Value: !Ref SesEventTable

  # ApiUrl:
  #   Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'

Resources:
  SesEventTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        # - AttributeName: Timestamp
        #   AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        # - AttributeName: Timestamp
        #   KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {Service: lambda.amazonaws.com}
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: DynamoDb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:BatchGet*
                  - dynamodb:Get*
                  - dynamodb:PutItem
                  - dynamodb:Update*
                Resource: !GetAtt SesEventTable.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CollectorLambdaFunction}'
      RetentionInDays: 14

  LambdaRoleLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaLoggingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt LambdaLogGroup.Arn
      Roles:
        - !Ref LambdaRole
        

  SesEventTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Ref AWS::StackName
      Subscription: 
        - Endpoint: !GetAtt CollectorLambdaFunction.Arn
          Protocol: lambda

  SesEventTopicPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CollectorLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SesEventTopic

  SesEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument: 
        Id: SesEventTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: SqsPublishFromSes
            Action:
              - sns:Publish
            Effect: Allow
            Principal: {Service: ses.amazonaws.com}
            Resource: !Ref SesEventTopic
      Topics: 
        - !Ref SesEventTopic

  CollectorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: SES Event Collector
      Environment:
        Variables:
          SesEventTableName: !Ref SesEventTable
      Handler: 'SesCollector.Collector::SesCollector.Collector.Function::FunctionHandler'
      Runtime: dotnet6
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CollectorArtifactKey

  # ApiLambdaLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub '/aws/lambda/${GetEventsApi}'
  #     RetentionInDays: 14

  # ApiLambdaRoleLogPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: LambdaLoggingPolicy
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - logs:CreateLogStream
  #             - logs:PutLogEvents
  #           Resource: !GetAtt ApiLambdaLogGroup.Arn
  #     Roles:
  #       - !Ref LambdaRole

  # ApiGatewayApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod
  #     # Cors: !Sub "'${AllowedCorsOrigin}'"

  # GetEventsApi:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     Handler: 'SesCollector.Api::SesCollector.Api.Functions::GetSesEventsAsync'
  #     Runtime: dotnet6
  #     CodeUri: 
  #       Bucket: !Ref CodeBucketName
  #       Key: !Ref ApiArtifactKey
  #     Description: Function to get a list of events
  #     MemorySize: 128
  #     Timeout: 30
  #     Policies:
  #       - AWSLambdaFullAccess
  #     Environment:
  #       Variables:
  #         SesEventTableName: !Ref SesEventTable
  #         # AllowedCorsOrigin: !Ref AllowedCorsOrigin
  #     Events:
  #       GetList:
  #         Type: Api
  #         Properties:
  #           Path: /events
  #           Method: GET
  #           RestApiId:
  #             Ref: ApiGatewayApi
  #           RequestParameters:
  #             - method.request.querystring.fromEmail
  #             - method.request.querystring.toEmail
